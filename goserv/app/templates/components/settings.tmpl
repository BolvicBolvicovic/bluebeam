{{define "settings"}}
    
    <!-- File Upload Form -->
    <form class="w-full space-y-4" onsubmit="sendCriterias(event)">
      <!-- Button Choices Section -->
       <div class="flex justify-between mt-4">
         <!-- Google Spreadsheet Section -->
         <div class="flex flex-col items-center">
           <span class="text-gray-600 text-sm mb-1">Choose Google Spreadsheet for simplicity<br/>or JSON for efficiency</span>
           <button 
             class="py-2 px-4 bg-blue-400 text-white font-semibold rounded-lg hover:bg-blue-500 transition" 
             onclick="initOAuth(event)" 
             id="googleSsButton">
             submit Google Spreadsheet criteria
           </button>
         </div>

         <!-- JSON Section -->
         <div class="flex flex-col items-center">
           <label for="criterias" class="w-full text-center py-2 px-4 bg-blue-50 text-blue-400 border border-blue-300 rounded-lg cursor-pointer hover:bg-blue-100 transition">
             Choose JSON criteria file
           </label>
           <input 
             type="file" 
             name="criterias" 
             id="criterias" 
             accept=".json" 
             required 
             class="hidden" 
             onchange="showFileSelected()" 
           />
           <button 
             type="submit" 
             id="submitJSON"
             class="mt-2 py-2 px-4 bg-blue-400 text-white font-semibold rounded-lg hover:bg-blue-500 transition">
             submit JSON criteria file
           </button>
           <div id="fileStatus" class="text-center text-red-500 mt-2"></div>
         </div>
       </div>
      </form>

    <!-- Divider -->
    <div class="border-t border-gray-300 my-6"></div>

    <!-- Email Update Form -->
    <form class="space-y-4" onsubmit="updateEmail(event)">
     <input 
       type="email" 
       id="email" 
       name="email" 
       placeholder="Enter new email" 
       required 
       class="w-full py-2 px-4 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500" 
     />
     <button 
       type="submit" 
       class="w-full py-2 bg-blue-400 text-white font-semibold rounded-lg hover:bg-blue-500 transition">
       update email
     </button>
     
     <!-- Notification Message -->
     <div id="emailStatus" class="text-center text-red-500 mt-2"></div>
    </form>

    <script>
      function showFileSelected() {
        const fileStatus = document.getElementById("fileStatus");
        const fileInput = document.getElementById("criterias");

        if (fileInput.files.length > 0) {
          fileStatus.textContent = "File selected: " + fileInput.files[0].name;
          fileStatus.classList.remove("text-blue-800");
          fileStatus.classList.add("text-blue-400");
        } else {
          fileStatus.textContent = "";
        }
      }

      function sendCriterias(event) {
        event.preventDefault();
        const file = document.getElementById("criterias").files[0];
        const fileStatus = document.getElementById("fileStatus");
        const submitJSON = document.getElementById("submitJSON");

        if (submitJSON.disabled) {
          return;
        }
        submitJSON.disabled = true;
        setTimeout(() => { submitJSON.disabled = false }, 3000);


        if (!file) {
          fileStatus.textContent = "Please select a file before submitting.";
          fileStatus.classList.remove("text-blue-400");
          fileStatus.classList.add("text-blue-800");
          return;
        }

        const reader = new FileReader();
        reader.onload = function() {
          const features = JSON.parse(reader.result);

          fetch('https://localhost/criterias', {
            method: 'POST',
            mode: 'cors',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              features: features,
              filename: file.name
            }),
          })
          .then(response => response.json())
          .then(data => {
            if (!data.error) {
              fileStatus.textContent = "Criteria successfully submitted!";
              fileStatus.classList.remove("text-blue-800");
              fileStatus.classList.add("text-blue-400");
            } else {
              console.error('Error sending data:', data.error);
              fileStatus.textContent = "Error submitting criteria.";
              fileStatus.classList.remove("text-blue-400");
              fileStatus.classList.add("text-blue-800");
            }
          })
          .catch(error => {
            console.error('Error sending data:', error);
            fileStatus.textContent = "Error submitting criteria.";
            fileStatus.classList.remove("text-blue-400");
            fileStatus.classList.add("text-blue-800");
          });
        }

        reader.readAsText(file);
      }

      function updateEmail(event) {
        event.preventDefault();
        const email = document.getElementById("email").value;
        const emailStatus = document.getElementById("emailStatus");

        fetch('https://localhost/updateEmail', {
          method: 'PATCH',
          mode: 'cors',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            email: email
          }),
        })
        .then(response => response.text())
        .then(data => {
          emailStatus.textContent = "Email updated successfully!";
          emailStatus.classList.remove("text-blue-800");
          emailStatus.classList.add("text-blue-400");
        })
        .catch(error => {
          console.error('Error updating email:', error);
          emailStatus.textContent = "Error updating email.";
          emailStatus.classList.remove("text-blue-400");
          emailStatus.classList.add("text-blue-800");
        });
      }

       /* exported gapiLoaded */
       /* exported gisLoaded */
       /* exported handleAuthClick */
       /* exported handleSignoutClick */


      const CLIENT_ID = "726518157620-8s2194lb2ka65vfga9loee2sookpjfda.apps.googleusercontent.com";
      const API_KEY = '';
      const APP_ID  = "bluebeam-438322";
      const SCOPES = "https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/spreadsheets";
      
      let tokenClient;
      let accessToken = null;
      let pickerInited = false;
      let gisInited = false;

      document.getElementById("googleSsButton").style.visibility = "hidden";

      function gapiLoaded() {
        gapi.load('client:picker', initializePicker);
      }
    
      /**
       * Callback after the API client is loaded. Loads the
       * discovery doc to initialize the API.
       */
      async function initializePicker() {
        await gapi.client.load('https://www.googleapis.com/discovery/v1/apis/drive/v3/rest');
        await gapi.client.load('https://sheets.googleapis.com/$discovery/rest?version=v4');
        pickerInited = true;
        maybeEnableButtons();
      }
    
      /**
       * Callback after Google Identity Services are loaded.
       */
      function gisLoaded() {
        tokenClient = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,
          scope: SCOPES,
          callback: '', // defined later
        });
        gisInited = true;
        maybeEnableButtons();
      }

      function maybeEnableButtons() {
        if (pickerInited && gisInited) {
          document.getElementById('googleSsButton').style.visibility = 'visible';
        }
      }


      function initOAuth(event) {
         tokenClient.callback = async (response) => {
            if (response.error !== undefined) {
              throw (response);
            }
            accessToken = response.access_token;
            await createPicker();
         };
    
         if (accessToken === null) {
          // Prompt the user to select a Google Account and ask for consent to share their data
          // when establishing a new session.
           tokenClient.requestAccessToken({prompt: 'consent'});
         } else {
          // Skip display of account chooser and consent dialog for an existing session.
           tokenClient.requestAccessToken({prompt: ''});
         }
      }

      function createPicker() {
        const view = new google.picker.View(google.picker.ViewId.SPREADSHEETS);
        const picker = new google.picker.PickerBuilder()
            .enableFeature(google.picker.Feature.NAV_HIDDEN)
            // .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
            .setDeveloperKey(API_KEY)
            .setAppId(APP_ID)
            .setOAuthToken(accessToken) // Use the token from the server
            .addView(view)
            .addView(new google.picker.DocsUploadView())
            .setCallback(pickerCallback)
            .build();
        picker.setVisible(true);
      }

      async function pickerCallback(data) {
        if (data[google.picker.Response.ACTION] === google.picker.Action.PICKED) {
          const document = data[google.picker.Response.DOCUMENTS][0];
          const fileId = document[google.picker.Document.ID];
      
          const res = await gapi.client.sheets.spreadsheets.values.get({
            spreadsheetId: fileId,
            range: 'Sheet1', // Adjust the sheet name and range as needed
          });
      
          const rows = res.result.values;
      
          if (!rows || rows.length === 0) {
            console.log('No data found in the spreadsheet.');
            return;
          }
      
          // Convert rows into JSON objects assuming the first row contains headers
          const headers = rows[0];
          const jsonArray = rows.slice(1).map(row => {
            let obj = {};
            headers.forEach((header, index) => {
              obj[header] = row[index] || "";
            });
            return obj;
          });
          console.log(JSON.stringify(jsonArray, null, 2));
      
          fetch('https://localhost/criterias', {
            method: 'POST',
            mode: 'cors',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              features: jsonArray,
              filename: ("https://docs.google.com/spreadsheets/d/" + fileId)
            }),
          })
          .then(response => response.json())
          .then(data => {
            if (!data.error) {
              fileStatus.textContent = "Criteria successfully submitted!";
              fileStatus.classList.remove("text-blue-800");
              fileStatus.classList.add("text-blue-400");
            } else {
              console.error('Error sending data:', data.error);
              fileStatus.textContent = "Error submitting criteria.";
              fileStatus.classList.remove("text-blue-400");
              fileStatus.classList.add("text-blue-800");
            }
          })
          .catch(error => {
            console.error('Error sending data:', error);
            fileStatus.textContent = "Error submitting criteria.";
            fileStatus.classList.remove("text-blue-400");
            fileStatus.classList.add("text-blue-800");
          });
        }
      }

    </script>
    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
    <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>
{{end}}
