<!DOCTYPE html>
<html>
  <head>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-gray-100">
    {{template "navbar" .Navbar}}
    <br/>
    {{template "popupOutput" .PopupOutput}}
    <div class="flex gap-6 place-content-center">
      <!-- Left Column -->
      <div class="flex flex-col items-center p-8 bg-white shadow-lg rounded-lg max-w-3xl w-2/3">
        <!-- Welcome Message -->
        <h2 class="text-3xl font-bold text-blue-400 text-center mb-6">
          VÃ¤lkommen, <span class="text-gray-700">{{ .username }}</span>
        </h2>
        
        <!-- Form Section -->
        <form id="urls" class="w-full space-y-4">
          <label for="textarea" class="text-gray-700 font-medium">Enter root URLs:</label>
          <textarea 
            id="textArea"
            class="w-full h-32 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring focus:ring-blue-200" 
            placeholder="Write one root URL per line"
            required
          ></textarea>
          <div class="flex justify-end">
            {{template "button" .UrlsSubmitButton}}
            <div id="messageOutput" class="text-red-500 text-sm mt-2"></div>
          </div>
        </form>
        
        <!-- Additional Settings -->
        <div class="mt-6 w-full border-t border-gray-200 pt-4">
          {{template "settings"}}
        </div>
      </div>
      
      <!-- Right Column -->
      <div class="flex flex-col gap-4 w-1/3">

        <form id="formInputChoice" for="dropdownInputChoice" class="p-6 bg-white shadow-lg rounded-lg border border-gray-200">
          <h3 class="text-xl font-semibold text-gray-700 mb-4">Current Input File</h3>
          <select id="dropdownInputChoice" name="dropdownInputChoice" class="w-full p-3 text-gray-700 bg-gray-100 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"></select>
          <div class="mt-4">
            {{template "button" .InputChoiceSubmitButton}}
          </div>
        </form>

        <div class="p-6 bg-white shadow-lg rounded-lg">
          <h3 class="text-xl font-semibold text-gray-700">previous input files</h3>
          <p class="text-gray-600" id="inputFilesLinks">here will be the list of input files</p>
        </div>
        
        <div class="p-6 bg-white shadow-lg rounded-lg">
          <h3 class="text-xl font-semibold text-gray-700">previous output spreadsheets</h3>
          <p class="text-gray-600" id="outputFilesLinks">here will be the list of output files</p>
        </div>

      </div>
    </div>
    <br/>
    <script>
      const urls = document.getElementById("urls");
      const textArea = document.getElementById("textArea");
      const inputFilesLinks = document.getElementById("inputFilesLinks");
      const dropdownInputChoice = document.getElementById("dropdownInputChoice");
      const formInputChoice = document.getElementById("formInputChoice");
      const outputFilesLinks = document.getElementById("outputFilesLinks");
      const popupOutput = document.getElementById("popupOutput");

      popupOutput.style.display = "none";
      //TODO: Handle the popup output and its buttons

      window.addEventListener("load", () => {
        fetch("/dashboard/inputFiles")
          .then(response => response.json())
          .then(data => {
            if (data.error) {
              inputFilesLinks.innerHTML = data.error;
              dropdownInputChoice.disabled = true;              
            } else if (data.index === -1) {
              dropdownInputChoice.disabled = true;              
              return;
            } else {
              inputFilesLinks.innerHTML = "";
              // Loop through each file and create links for each filename
              let i = 0;
              data.files.forEach(file => {
                const option = document.createElement("option")
                const fileLink = document.createElement("a");

                option.value = i;
                option.innerText = file.filename;
                if (file.filename.indexOf('.json') == -1) {
                  fileLink.href = file.filename;
                } else {
                  const parsedFeatures = JSON.stringify(file.features);
                  const blob = new Blob([parsedFeatures], {type: "application/json"});
                  const url  = URL.createObjectURL(blob);
                  fileLink.href = url;
                  // fileLink.download = file.filename;
                }
                fileLink.textContent = file.filename;
                fileLink.className = "text-gray-600";
      
                const listItem = document.createElement("li");
                listItem.appendChild(fileLink);
      
                dropdownInputChoice.appendChild(option);
                inputFilesLinks.appendChild(listItem);
                i++;
              });
              dropdownInputChoice.getElementsByTagName('option')[data.index].selected = true;
            }
          })
          .catch(error => {
            console.error("Error fetching data:", error);
            messageOutput.innerText = "An unexpected error occurred. Please try again.";
          });
        fetch("/dashboard/urlsOutput")
          .then(response => response.json())
          .then(data => {
            if (data.error) {
              outputFilesLinks.innerHTML = data.error;
              return;
            }
            const decodedUrls = atob(data.urlsoutput);
            const urls = decodedUrls.match(/https?:\/\/[^\s]+?(?=https?:\/\/|$)/g);
            if (urls == null) {
              return;
            } else {
              outputFilesLinks.innerHTML = "";
              urls.forEach(url => {
                const urlLink = document.createElement("a");

                urlLink.href = url;
                urlLink.textContent = url;
                urlLink.className = "text-gray-600";

                const listItem = document.createElement("li");
                listItem.appendChild(urlLink);
      
                outputFilesLinks.appendChild(listItem);
              });
            }
          })
          .catch(error => {
            console.error("Error fetching data:", error);
            messageOutput.innerText = "An unexpected error occurred. Please try again.";
          });
      });

      formInputChoice.addEventListener("submit", (e) => {
        e.preventDefault();
        if (dropdownInputChoice.disabled) {
          return;
        }
        const body = JSON.stringify({ newindex: dropdownInputChoice.value })

        fetch("/currentInputFile", {
          method: 'PATCH',
          mode: 'cors',
          headers: { 'Content-Type': 'application/json' },
          body: body
        })
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            messageOutput.innerHTML = data.error;
          } else {
            messageOutput.innerHTML = data.message;
          }
        })
        .catch(error => {
          console.error('Error sending data:', error);
          messageOutput.innerText = 'An unexpected error occurred. Please try again.';
        });
      });
            
      urls.addEventListener("submit", (e) => {
        e.preventDefault();

        const parsedUrls = textArea.value.split('\n').map(line => line.trim()).filter(line => line !== '');
        const body = JSON.stringify({ urls: parsedUrls });

        fetch("/urls", {
          method: 'POST',
          mode: 'cors',
          headers: { 'Content-Type': 'application/json' },
          body: body
        })
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            messageOutput.innerHTML = data.error;
          } else {
            messageOutput.innerHTML = data.message;
          }
        })
        .catch(error => {
          console.error('Error sending data:', error);
          document.getElementById("messageOutput").innerText = 'An unexpected error occurred. Please try again.';
        });
      });
    </script>
  </body>
</html>
